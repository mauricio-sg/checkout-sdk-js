{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tslib\"","webpack:///external \"@bigcommerce/data-store\"","webpack:///external \"lodash\"","webpack:///external \"rxjs\"","webpack:///external \"@bigcommerce/memoize\"","webpack:///./src/shipping/consignment-actions.ts","webpack:///external \"rxjs/operators\"","webpack:///./src/shipping/shipping-strategy-actions.ts","webpack:///./src/customer/customer-strategy-actions.ts","webpack:///./src/payment/payment-strategy-actions.ts","webpack:///./src/common/error/errors/missing-data-error.ts","webpack:///./src/checkout/checkout-actions.ts","webpack:///./src/order/order-actions.ts","webpack:///./src/payment/payment-method-actions.ts","webpack:///./src/billing/billing-address-actions.ts","webpack:///./src/checkout-buttons/checkout-button-actions.ts","webpack:///./src/coupon/coupon-actions.ts","webpack:///./src/common/error/errors/standard-error.ts","webpack:///./src/common/utility/set-prototype-of.ts","webpack:///./src/payment/instrument/instrument-actions.ts","webpack:///./src/coupon/gift-certificate-actions.ts","webpack:///./src/remote-checkout/remote-checkout-actions.ts","webpack:///./src/payment/strategies/googlepay/googlepay.ts","webpack:///external \"@bigcommerce/script-loader\"","webpack:///./src/common/error/errors/request-error.ts","webpack:///./src/payment/payment-status-types.ts","webpack:///./src/config/config-actions.ts","webpack:///./src/common/utility/is-plain-object.ts","webpack:///./src/geography/country-actions.ts","webpack:///./src/shipping/shipping-country-actions.ts","webpack:///./src/signin-email/signin-email-actions.ts","webpack:///./src/common/http-request/content-type.ts","webpack:///./src/payment/errors/payment-method-client-unavailable-error.ts","webpack:///external \"@bigcommerce/request-sender\"","webpack:///./src/store-credit/store-credit-actions.ts","webpack:///./src/common/error/errors/invalid-argument-error.ts","webpack:///./src/payment/payment-method-types.ts","webpack:///./src/payment/payment-actions.ts","webpack:///./src/common/http-request/join-includes.ts","webpack:///external \"shallowequal\"","webpack:///./src/common/utility/is-equal.ts","webpack:///external \"@bigcommerce/form-poster\"","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2.ts","webpack:///external \"reselect\"","webpack:///./src/spam-protection/spam-protection-actions.ts","webpack:///./src/customer/customer-actions.ts","webpack:///./src/common/selector/with-memoized-combiner.ts","webpack:///./src/common/error/error-actions.ts","webpack:///./src/payment/payment-method-action-creator.ts","webpack:///./src/payment/payment-method-request-sender.ts","webpack:///./src/checkout/checkout-default-includes.ts","webpack:///./src/common/http-request/internal-api-headers.ts","webpack:///./src/payment/errors/payment-method-failed-error.ts","webpack:///./src/common/utility/bind-decorator.ts","webpack:///./src/payment/strategies/braintree/braintree-script-loader.ts","webpack:///./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack:///./src/common/error/errors/not-initialized-error.ts","webpack:///./src/common/error/throw-error-action.ts","webpack:///./src/common/data-store/cache-action.ts","webpack:///./src/common/data-store/is-action-options.ts","webpack:///./src/common/data-store/cachable-action-decorator.ts","webpack:///./src/common/http-request/join-or-merge-includes.ts","webpack:///./src/common/http-request/merge-includes.ts","webpack:///./src/common/utility/omit-deep.ts","webpack:///./src/checkout/checkout-action-creator.ts","webpack:///./src/shipping/consignment-action-creator.ts","webpack:///./src/shipping/consignment-request-sender.ts","webpack:///./src/payment/strategies/masterpass/get-callback-url.ts","webpack:///./src/common/utility/is-private.ts","webpack:///./src/common/error/errors/unrecoverable-error.ts","webpack:///./src/common/error/errors/map-from-internal-error-response.ts","webpack:///./src/common/error/request-error-factory.ts","webpack:///./src/common/error/errors/map-from-storefront-error-response.ts","webpack:///./src/common/error/clear-error-reducer.ts","webpack:///./src/common/utility/replace.ts","webpack:///./src/common/utility/object-set.ts","webpack:///./src/billing/billing-address-state.ts","webpack:///./src/billing/billing-address-reducer.ts","webpack:///./src/common/utility/array-replace.ts","webpack:///./src/common/utility/object-merge.ts","webpack:///./src/cart/cart-state.ts","webpack:///./src/cart/cart-reducer.ts","webpack:///./src/checkout-buttons/checkout-button-state.ts","webpack:///./src/checkout-buttons/checkout-button-reducer.ts","webpack:///./src/config/config-state.ts","webpack:///./src/config/config-reducer.ts","webpack:///./src/coupon/coupon-state.ts","webpack:///./src/coupon/coupon-reducer.ts","webpack:///./src/coupon/gift-certificate-state.ts","webpack:///./src/coupon/gift-certificate-reducer.ts","webpack:///./src/customer/customer-state.ts","webpack:///./src/customer/customer-reducer.ts","webpack:///./src/customer/customer-strategy-state.ts","webpack:///./src/customer/customer-strategy-reducer.ts","webpack:///./src/geography/country-state.ts","webpack:///./src/geography/country-reducer.ts","webpack:///./src/order/order-state.ts","webpack:///./src/order/order-reducer.ts","webpack:///./src/payment/payment-reducer.ts","webpack:///./src/payment/payment-method-state.ts","webpack:///./src/payment/payment-method-reducer.ts","webpack:///./src/common/utility/merge-or-push.ts","webpack:///./src/payment/payment-strategy-state.ts","webpack:///./src/payment/payment-strategy-reducer.ts","webpack:///./src/payment/instrument/instrument-state.ts","webpack:///./src/payment/instrument/instrument-reducer.ts","webpack:///./src/remote-checkout/remote-checkout-state.ts","webpack:///./src/remote-checkout/remote-checkout-reducer.ts","webpack:///./src/shipping/consignment-state.ts","webpack:///./src/shipping/consignment-reducer.ts","webpack:///./src/shipping/shipping-country-state.ts","webpack:///./src/shipping/shipping-country-reducer.ts","webpack:///./src/shipping/shipping-strategy-state.ts","webpack:///./src/shipping/shipping-strategy-reducer.ts","webpack:///./src/signin-email/signin-email-state.ts","webpack:///./src/signin-email/signin-email-reducer.ts","webpack:///./src/store-credit/store-credit-reducer.ts","webpack:///./src/subscription/subscriptions-state.ts","webpack:///./src/subscription/subscriptions-reducer.ts","webpack:///./src/checkout/checkout-state.ts","webpack:///./src/checkout/checkout-reducer.ts","webpack:///./src/common/utility/guard.ts","webpack:///./src/common/utility/create-freeze-proxy.ts","webpack:///./src/form/form-selector.ts","webpack:///./src/payment/instrument/supported-payment-instruments.ts","webpack:///./src/address/is-address-equal.ts","webpack:///./src/shipping/consignment-selector.ts","webpack:///./src/store-credit/store-credit-state.ts","webpack:///./src/checkout/create-internal-checkout-selectors.ts","webpack:///./src/billing/billing-address-selector.ts","webpack:///./src/checkout-buttons/checkout-button-selector.ts","webpack:///./src/coupon/coupon-selector.ts","webpack:///./src/customer/customer-selector.ts","webpack:///./src/remote-checkout/remote-checkout-selector.ts","webpack:///./src/shipping/shipping-address-selector.ts","webpack:///./src/payment/payment-selector.ts","webpack:///./src/signin-email/signin-email-selector.ts","webpack:///./src/cart/cart-selector.ts","webpack:///./src/config/config-selector.ts","webpack:///./src/geography/country-selector.ts","webpack:///./src/customer/customer-strategy-selector.ts","webpack:///./src/coupon/gift-certificate-selector.ts","webpack:///./src/payment/instrument/instrument-selector.ts","webpack:///./src/payment/payment-method-selector.ts","webpack:///./src/payment/payment-strategy-selector.ts","webpack:///./src/shipping/shipping-country-selector.ts","webpack:///./src/shipping/shipping-strategy-selector.ts","webpack:///./src/checkout/checkout-selector.ts","webpack:///./src/order/order-selector.ts","webpack:///./src/store-credit/store-credit-selector.ts","webpack:///./src/subscription/subscriptions-selector.ts","webpack:///./src/checkout/create-checkout-store.ts","webpack:///./src/checkout/create-action-transformer.ts","webpack:///./src/common/error/create-request-error-factory.ts","webpack:///./src/checkout/create-checkout-store-reducer.ts","webpack:///./src/checkout/errors/checkout-not-available-error.ts","webpack:///./src/checkout/checkout-request-sender.ts","webpack:///./src/checkout/checkout-params.ts","webpack:///./src/common/selector/selector-decorator.ts","webpack:///./src/checkout-buttons/checkout-button-error-selector.ts","webpack:///./src/checkout-buttons/checkout-button-status-selector.ts","webpack:///./src/checkout-buttons/create-checkout-button-selectors.ts","webpack:///./src/checkout-buttons/checkout-button-initializer.ts","webpack:///./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack:///./src/common/dom/is-element-id.ts","webpack:///./src/common/dom/set-unique-element-id.ts","webpack:///./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack:///./src/checkout-buttons/strategies/amazon-pay-v2/amazon-pay-v2-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack:///./src/checkout-buttons/strategies/paypal-commerce/paypal-commerce-button-strategy.ts","webpack:///./src/checkout-buttons/create-checkout-button-initializer.ts","webpack:///./src/checkout-buttons/create-checkout-button-registry.ts","webpack:///./src/common/utility/cache-key-maps.ts","webpack:///./src/common/utility/cache-key-resolver.ts","webpack:///./src/common/error/errors/map-from-payment-error-response.ts","webpack:///./src/common/error/errors/timeout-error.ts","webpack:///./src/payment/errors/payment-method-invalid-error.ts","webpack:///./src/common/selector/create-selector.ts","webpack:///./src/subscription/subscriptions-actions.ts","webpack:///./src/config/config-action-creator.ts","webpack:///./src/config/config-request-sender.ts","webpack:///./src/subscription/subscriptions-request-sender.ts","webpack:///./src/billing/billing-address-request-sender.ts","webpack:///./src/common/registry/registry.ts","webpack:///./src/common/error/errors/not-implemented-error.ts","webpack:///./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack:///./src/payment/strategies/googlepay/googlepay-adyenv2-initializer.ts","webpack:///./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack:///./src/payment/strategies/googlepay/googlepay-authorizenet-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-checkoutcom-initializer.ts","webpack:///./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack:///./src/payment/strategies/paypal/paypal-script-loader.ts","webpack:///./src/bundles/checkout-button.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-sdk.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-script-loader.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-request-sender.ts","webpack:///./src/payment/strategies/paypal-commerce/paypal-commerce-payment-processor.ts","webpack:///./src/payment/strategies/paypal-commerce/create-paypal-commerce-payment-processor.ts","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2-payment-processor.ts","webpack:///./src/payment/strategies/amazon-pay-v2/amazon-pay-v2-script-loader.ts","webpack:///./src/payment/strategies/amazon-pay-v2/create-amazon-pay-v2-payment-processor.ts","webpack:///./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack:///./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack:///./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack:///./src/subscription/errors/update-subscriptions-error.ts","webpack:///./src/subscription/subscriptions-action-creator.ts","webpack:///./src/billing/errors/unable-to-continue-as-guest-error.ts","webpack:///./src/billing/billing-address-action-creator.ts","webpack:///./src/shipping/getShippableItemsCount.ts","webpack:///./src/shipping/getLineItemsCount.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","ShippingStrategyActionType","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","subtype","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","CheckoutActionType","OrderActionType","PaymentMethodActionType","BillingAddressActionType","CheckoutButtonActionType","CouponActionType","message","setPrototypeOf","__proto__","Error","captureStackTrace","stack","InstrumentActionType","GiftCertificateActionType","RemoteCheckoutActionType","ButtonType","ButtonColor","BillingAddressFormat","DEFAULT_RESPONSE","body","headers","status","response","errors","ACKNOWLEDGE","FINALIZE","ConfigActionType","isPlainObject","CountryActionType","ShippingCountryActionType","SignInEmailActionType","ContentType","StoreCreditActionType","HOSTED","OFFLINE","PaymentActionType","joinIncludes","includes","join","isEqual","objectA","objectB","options","Array","isArray","length","index","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","isObjectEqual","AmazonPayV2Regions","AmazonPayV2CheckoutLanguage","AmazonPayV2Placement","AmazonPayV2LedgerCurrency","AmazonPayV2PayOptions","SpamProtectionActionType","CustomerActionType","withMemoizedCombiner","creator","combiner","args","pop","result","combinerArgs","ErrorActionType","_requestSender","loadPaymentMethods","observer","next","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","timeout","this","Accept","JsonV1","url","INTERNAL_USE_ONLY","bindMethodDecorator","_","descriptor","method","boundMethod","set","target","decoratedTarget","getOwnPropertyNames","forEach","getOwnPropertyDescriptor","bindClassDecorator","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","loadHostedFields","hostedFields","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","createHostedFields","_teardown","default","mod","NotInitializedErrorType","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","action","payload","cacheAction","fn","pipe","store","isActionOptions","param","useCache","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","lastArg","instanceMethods","joinOrMergeIncludes","baseIncludes","includeDictionaryOrList","includesDictionary","deletions","on","additions","mergeIncludes","omitDeep","predicate","map","_checkoutRequestSender","_configActionCreator","loadCheckout","id","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","LoadCheckoutFailed","loadDefaultCheckout","state","getState","context","config","getContextConfig","checkoutId","updateCheckout","checkout","getCheckout","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","_consignmentRequestSender","unassignItemsByAddress","consignment","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getUpdateAddressRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","customItems","item","itemId","quantity","_hydrateLineItems","lineItemIds","existingItem","sharedItem","lineItem","concat","request","DEFAULT_INCLUDES","post","put","delete","getCallbackUrl","origin","window","location","isPrivate","indexOf","joinErrors","reduce","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","ClearError","isClearErrorAction","replace","currentValue","newValue","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","data","dataReducer","errorsReducer","statusesReducer","reducer","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","UpdateSubscriptionsRequested","UpdateSubscriptionsSucceeded","ContinueAsGuestRequested","UpdateSubscriptionsFailed","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","a","b","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cartReducer","ApplyCouponSucceeded","RemoveCouponSucceeded","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","configReducer","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","couponReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","giftCertificateReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customerReducer","customer","customerStrategyReducer","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","countryReducer","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","orderReducer","metaReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","SubmitPaymentSucceeded","paymentMethodReducer","array","defaultPredicate","push","mergeOrPush","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","paymentStrategyReducer","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrumentReducer","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","instrumentId","isDeleting","deletingInstrument","remoteCheckoutReducer","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","SignOutCustomerSucceeded","shippingCountryReducer","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shippingStrategyReducer","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","signInEmailReducer","SendSignInEmailSucceeded","SendSignInEmailRequested","SendSignInEmailFailed","storeCreditReducer","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","subscriptionsReducer","checkoutReducer","orderId","guard","errorFactory","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","countries","countryCode","selectedCountry","storeConfig","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","country","items","label","fieldType","itemtype","processCountry","subdivisions","requiresState","required","processProvince","hasPostalCodes","Boolean","processsPostCode","provider","braintreepaypal","authorizenet","elavon","checkoutcom","stripe","cybersource","converge","bluesnapv2","orbital","paymetric","bolt","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getLoadError","loadError","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoading","isLoadingShippingOptions","isCreating","isAssigningItems","createInternalCheckoutSelectorsFactory","getBillingAddress","getBillingAddressOrThrow","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","getEmail","getSendError","isSending","createBillingAddressSelector","continueAsGuestError","createCartSelector","getCartOrThrow","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getFlashMessages","filterType","flashMessages","getStoreConfig","getStoreConfigOrThrow","getExternalSource","externalSource","getVariantIdentificationToken","variantIdentificationToken","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstrumentsByPaymentMethod","instruments","paymentMethod","paymentMethodKey","currentMethod","getCardInstrument","cards","find","instrument","bigpayToken","some","card","getInstruments","supportedProvider","getInstrumentsMeta","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getPaymentMethodOrThrow","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getCheckoutOrThrow","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","Math","max","outstandingBalance","isExecutingSpamCheck","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderOrThrow","getOrderMeta","createOrderSelectorFactory","createPaymentSelector","payments","providerId","internalPayment","step","redirectUrl","nonce","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","createSubscriptionsSelector","createSubscriptionsSelectorFactory","createSignInEmailSelector","signInEmail","sendError","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","subscriptions","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutIncludes","selectorDecorator","resolver","memoizedMethod","cachedValue","getUsedCount","cache","getKey","selectorMethodDecorator","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","CheckoutButtonErrorSelector","isInitializingButton","isDeinitializingButton","CheckoutButtonStatusSelector","createCheckoutButtonSelectors","CheckoutButtonMethodType","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","test","selector","idPrefix","containers","document","querySelectorAll","slice","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonInitializer","_registry","_paymentMethodActionCreator","_checkoutActionCreator","_amazonPayV2PaymentProcessor","amazonpay","_createSignInButton","_walletButton","parentNode","removeChild","getElementById","_getAmazonPayV2ButtonOptions","amazonButtonOptions","createButton","shopPath","merchantId","testMode","checkoutLanguage","ledgerCurrency","checkoutSessionMethod","extractAmazonCheckoutSessionId","createCheckoutSession","sandbox","productType","getShippableItemsCount","PayOnly","PayAndShip","placement","Cart","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","_paymentMethod","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","amount","currency","offerCredit","tokenizePayment","postForm","payment_type","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","stateOrProvinceCode","_googlePayPaymentProcessor","_methodId","_getMethodId","googlePayButton","_handleWalletButtonClick","appendChild","event","preventDefault","hasPhysicalItems","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","removeEventListener","buttonContainer","button","createElement","src","addEventListener","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","_host","clientId","actions","res","_onError","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","_paypalCommercePaymentProcessor","buttonParams","onApprove","onClick","_handleClickButtonProvider","paypalCommerce","_getParamsScript","renderButtons","_isCredit","fundingSource","orderID","order_id","intent","isPayPalCreditAvailable","disableFunding","createCheckoutButtonInitializer","host","requestSender","formPoster","registry","scriptLoader","checkoutActionCreator","paypalCommercePaymentProcessor","BRAINTREE_PAYPAL","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","GOOGLEPAY_ADYENV2","GOOGLEPAY_AUTHORIZENET","GOOGLEPAY_BRAINTREE","GOOGLEPAY_CHECKOUTCOM","GOOGLEPAY_STRIPE","PAYPALEXPRESS","PAYPALCOMMERCE","AMAZON_PAY_V2","createCheckoutButtonRegistry","isTerminalCacheKeyMap","_lastId","_map","maps","_usedMaps","_options","maxSize","onExpire","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","splice","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","mapFromPaymentErrorResponse","SubscriptionsActionType","_configRequestSender","updateSubscriptions","DEFAULT_PARAMS","createAddress","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_hasInstance","hasShippingAddress","_getGooglePayPaymentDataRequest","parseResponse","info","cardType","lastFour","currencyCode","gatewayMerchantId","merchantName","apiVersion","apiVersionMinor","merchantInfo","authJwt","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressRequired","billingAddressParameters","format","Full","phoneNumberRequired","tokenizationSpecification","transactionInfo","totalPriceStatus","totalPrice","toFixed","emailRequired","shippingAddressRequired","shippingAddressParameters","baseRequest","_getGooglePaymentDataRequest","btoa","supportedCards","paymentGatewaySpecification","_getPaymentGatewaySpecification","cardPaymentMethod","_getCardPaymentMethod","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parse","paymentMethodData","tokenizationData","androidPayCards","description","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","googleMerchantName","googleMerchantId","cardRequirements","billingAddressFormat","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","paymentMethodTokenizationParameters","_publishableKey","_testMode","checkoutcomkey","_mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2","err","signature","protocolVersion","signedMessage","_convertToken","cardNetwork","cardDetails","_requestCheckoutcomTokenize","token_data","checkoutcomToken","checkoutcomKey","credentials","Json","Authorization","brand","last4","stripeVersion","stripePublishableKey","stripeConnectedAccount","scriptSrc","async","attributes","StyleButtonLabel","StyleButtonLayout","StyleButtonColor","StyleButtonShape","loadPaypalCommerce","isProgressiveOnboardingAvailable","attr","_validateParams","updatedOptions","setupPayment","isCredit","isCheckout","isCreditCard","_paypalCommerceRequestSender","_validateStyleParams","updatedStyle","color","layout","height","tagline","horizontal","paramsScript","optionalParams","Buttons","paramsForProvider","fundingKey","onRenderButton","createOrder","_fundingSource","_paypalButtons","isEligible","renderHostedFields","events","HostedFields","fields","styles","paymentsSDK","_hostedFields","submitHostedFields","submit","close","createPaypalCommercePaymentProcessor","paypalScriptLoader","paypalCommerceRequestSender","_amazonPayV2ScriptLoader","_amazonPayV2SDK","bindButton","buttonId","sessionId","changeAction","_getAmazonPayV2SDK","Pay","bindChangeAction","amazonCheckoutSessionId","renderButton","signout","amazonPayV2Region","region","isAmazonPayV2Region","us","amazon","createAmazonPayV2PaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_billingAddressActionCreator","_consignmentActionCreator","_configureWallet","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","tokenizePayload","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","cardInformation","number","google","environment","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","card_information","remoteBillingAddress","googlePayAddressMapped","createGooglePayPaymentProcessor","initializer","_subscriptionsRequestSender","_subscriptionActionCreator","continueAsGuest","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress","_updateCustomerConsent","acceptsAbandonedCartEmails","acceptsMarketingNewsletter","addedByPromotion","total"],"mappings":"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","file":"checkout-button.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 188);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'SHIPPING_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction |\n    ShippingStrategyWidgetAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type ShippingStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: ShippingStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentInstrument,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\nexport type TokenizeType = 'AndroidPayCard' | 'CreditCard' | 'CARD';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload>;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface TokenizationSpecification {\n    type: string;\n    parameters: {\n        gateway: string;\n        gatewayMerchantId?: string;\n        'braintree:apiVersion'?: string;\n        'braintree:clientKey'?: string;\n        'braintree:merchantId'?: string;\n        'braintree:sdkVersion'?: string;\n        'braintree:authorizationFingerprint'?: string;\n        'stripe:version'?: string;\n        'stripe:publishableKey'?: string;\n    };\n}\n\nexport enum BillingAddressFormat {\n    /*\n     * Name, country code, and postal code (default).\n     */\n    Min = 'MIN',\n    /*\n     * Name, street address, locality, region, country code, and postal code.\n     */\n    Full = 'FULL',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: BillingAddressFormat;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: TokenizationSpecification;\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        countryCode?: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { SignInEmail } from './signin-email';\n\nexport enum SignInEmailActionType {\n    SendSignInEmailRequested = 'SEND_SIGNIN_EMAIL_REQUESTED',\n    SendSignInEmailSucceeded = 'SEND_SIGNIN_EMAIL_SUCCEEDED',\n    SendSignInEmailFailed = 'SEND_SIGNIN_EMAIL_FAILED',\n}\nexport type SendSignInEmailAction =\n    SendSignInEmailRequestedAction |\n    SendSignInEmailSucceededAction |\n    SendSignInEmailFailedAction;\n\nexport interface SendSignInEmailRequestedAction extends Action {\n    type: SignInEmailActionType.SendSignInEmailRequested;\n}\n\nexport interface SendSignInEmailSucceededAction extends Action<SignInEmail> {\n    type: SignInEmailActionType.SendSignInEmailSucceeded;\n}\n\nexport interface SendSignInEmailFailedAction extends Action<Error> {\n    type: SignInEmailActionType.SendSignInEmailFailed;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes<T>(includes: T[]): string {\n    return uniq(includes).join(',');\n}\n","module.exports = require(\"shallowequal\");","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","export type EnvironmentType = 'PRODUCTION' | 'TEST';\n\nexport interface AmazonPayV2Options {\n    environment: EnvironmentType;\n}\n\nexport interface AmazonPayV2SDK {\n    Pay: AmazonPayV2Client;\n}\n\nexport interface AmazonPayV2Client {\n    /**\n     * Render the Amazon Pay button to a HTML container element.\n     *\n     * @param containerId - HTML element id.\n     * @param params - Button rendering params.\n     */\n    renderButton(containerId: string, params: AmazonPayV2ButtonParams): HTMLElement;\n\n    /**\n     * Bind click events to HTML elements, so that when the element is clicked, the buyer can select a different shipping address or payment method.\n     *\n     * @param buttonId - HTML element id.\n     * @param options - Element binding options.\n     */\n    bindChangeAction(buttonId: string, options: AmazonPayV2ChangeActionOptions): void;\n\n    /**\n     * Allow buyers to sign out from their Amazon account.\n     */\n    signout(): void;\n}\n\nexport interface AmazonPayV2HostWindow extends Window {\n    amazon?: AmazonPayV2SDK;\n}\n\nexport interface AmazonPayV2ButtonParams {\n    /**\n     * Amazon Pay merchant account identifier.\n     */\n    merchantId: string;\n\n    /**\n     * Configuration for calling the endpoint to Create Checkout Session.\n     */\n    createCheckoutSession: AmazonPayV2CheckoutSession;\n\n    /**\n     * Placement of the Amazon Pay button on your website.\n     */\n    placement: AmazonPayV2Placement;\n\n    /**\n     * Ledger currency provided during registration for the given merchant identifier.\n     */\n    ledgerCurrency: AmazonPayV2LedgerCurrency;\n\n    /**\n     * Product type selected for checkout. Default is 'PayAndShip'.\n     */\n    productType?: AmazonPayV2PayOptions;\n\n    /**\n     * Language used to render the button and text on Amazon Pay hosted pages.\n     */\n    checkoutLanguage?: AmazonPayV2CheckoutLanguage;\n\n    /**\n     * Sets button to Sandbox environment. Default is false.\n     */\n    sandbox?: boolean;\n}\n\nexport interface AmazonPayV2CheckoutSession {\n    /**\n     * Endpoint URL to Create Checkout Session.\n     */\n    url: string;\n\n    /**\n     * HTTP request method. Default is 'POST'.\n     */\n    method?: 'GET' | 'POST';\n\n    /**\n     * Checkout Session ID parameter in the response. Default is 'checkoutSessionId'.\n     */\n    extractAmazonCheckoutSessionId?: string;\n}\n\nexport type AmazonPayV2ChangeActionType = 'changeAddress' | 'changePayment';\n\nexport interface AmazonPayV2ChangeActionOptions {\n    /**\n     * Amazon Pay Checkout Session identifier.\n     */\n    amazonCheckoutSessionId: string;\n\n    /**\n     * Update requested by the buyer.\n     */\n    changeAction: AmazonPayV2ChangeActionType;\n}\n\nexport enum AmazonPayV2Regions {\n    de = 'eu',\n    jp = 'fe',\n    uk = 'eu',\n    us = 'na',\n}\n\nexport enum AmazonPayV2CheckoutLanguage {\n    en_US = 'en_US',\n    en_GB = 'en_GB',\n    de_DE = 'de_DE',\n    fr_FR = 'fr_FR',\n    it_IT = 'it_IT',\n    es_ES = 'es_ES',\n    ja_JP = 'ja_JP',\n}\n\nexport enum AmazonPayV2Placement {\n    /** Initial or main page. */\n    Home = 'Home',\n\n    /** Product details page. */\n    Product = 'Product',\n\n    /** Cart review page before buyer starts checkout. */\n    Cart = 'Cart',\n\n    /** Any page after buyer starts checkout. */\n    Checkout = 'Checkout',\n\n    /** Any page that doesn't fit the previous descriptions. */\n    Other = 'Other',\n}\n\nexport enum AmazonPayV2LedgerCurrency {\n    USD = 'USD',\n    EUR = 'EUR',\n    GBP = 'GBP',\n    JPY = 'JPY',\n}\n\nexport enum AmazonPayV2PayOptions {\n    /** Select this product type if you need the buyer's shipping details. */\n    PayAndShip = 'PayAndShip',\n\n    /** Select this product type if you do not need the buyer's shipping details. */\n    PayOnly = 'PayOnly',\n}\n","module.exports = require(\"reselect\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'SPAM_PROTECTION_EXECUTE_SUCCEEDED',\n    ExecuteFailed = 'SPAM_PROTECTION_EXECUTE_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action<Checkout> {\n    type: SpamProtectionActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action {\n    type: SpamProtectionActionType.ExecuteFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'customer.customerGroup',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nfunction bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nfunction bindDecorator<T extends Constructor<object>>(target: T): T;\nfunction bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\nexport default bindDecorator;\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this) as T;\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport { BraintreeClientCreator, BraintreeDataCollectorCreator, BraintreeHostedFieldsCreator, BraintreeHostWindow, BraintreePaypalCheckoutCreator, BraintreePaypalCreator, BraintreeThreeDSecureCreator, BraintreeVisaCheckoutCreator } from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.59.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n\n    async loadHostedFields(): Promise<BraintreeHostedFieldsCreator> {\n        await this._scriptLoader.loadScript('//js.braintreegateway.com/web/3.59.0/js/hosted-fields.min.js');\n\n        if (!this._window.braintree || !this._window.braintree.hostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.braintree.hostedFields;\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { BraintreeClient, BraintreeDataCollector, BraintreeHostedFields, BraintreeHostedFieldsCreatorConfig, BraintreeModule, BraintreePaypal, BraintreePaypalCheckout, BraintreeThreeDSecure, BraintreeVisaCheckout, GooglePayBraintreeSDK } from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    async createHostedFields(\n        options: Pick<BraintreeHostedFieldsCreatorConfig, 'fields' | 'styles'>\n    ): Promise<BraintreeHostedFields> {\n        const [client, hostedFields] = await Promise.all([\n            this.getClient(),\n            this._braintreeScriptLoader.loadHostedFields(),\n        ]);\n\n        return hostedFields.create({ ...options, client });\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                throw new Error('Decorator should be used in functions');\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import joinIncludes from './join-includes';\nimport mergeIncludes from './merge-includes';\n\n/**\n * Joins or merges a base list of includes with a set of additional includes.\n */\nexport default function joinOrMergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includeDictionaryOrList: { [key in T]?: boolean } | T[] = []\n): string {\n    return Array.isArray(includeDictionaryOrList) ?\n        joinIncludes([\n            ...baseIncludes,\n            ...includeDictionaryOrList,\n        ]) :\n        mergeIncludes(baseIncludes, includeDictionaryOrList);\n}\n","import { difference, filter, keys, pickBy } from 'lodash';\n\nimport joinIncludes from './join-includes';\n\n/**\n * Merges includes given a list of base includes and a dictionary\n * of includes\n */\nexport default function mergeIncludes<T extends string>(\n    baseIncludes: T[],\n    includesDictionary?: { [key in T]?: boolean }\n): string {\n    const deletions = keys(pickBy(includesDictionary, on => !on));\n    const additions = keys(filter(includesDictionary));\n\n    return joinIncludes([\n            ...difference(baseIncludes, deletions),\n            ...additions,\n        ]);\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {} as { [key: string]: any });\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { find } from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { CheckoutIncludes, CheckoutParams, CheckoutRequestSender, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, { ConsignmentsRequestBody, ConsignmentAssignmentRequestBody, ConsignmentCreateRequestBody, ConsignmentLineItem, ConsignmentRequestBody, ConsignmentShippingOptionRequestBody, ConsignmentUpdateRequestBody } from './consignment';\nimport { ConsignmentActionType, CreateConsignmentsAction, DeleteConsignmentAction, LoadShippingOptionsAction, UpdateConsignmentAction, UpdateShippingOptionAction } from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getUpdateAddressRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions<CheckoutParams>\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getUpdateAddressRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const { physicalItems, customItems = [] } = cart.lineItems;\n\n        return {\n            shippingAddress,\n            lineItems: [ ...physicalItems, ...customItems ].map(item => ({\n                itemId: item.id,\n                quantity: item.quantity,\n            })),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = find(lineItems, lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = find(cart.lineItems.physicalItems, lineItem => lineItem.id === itemId);\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutParams } from '../checkout';\nimport { joinIncludes, joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_INCLUDES = [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ];\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(\n        checkoutId: string,\n        consignments: ConsignmentsRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            body: consignments,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateConsignment(\n        checkoutId: string,\n        consignment: ConsignmentUpdateRequestBody,\n        { timeout, params: { include } = {} }: RequestOptions<CheckoutParams> = {}\n    ): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            body,\n            params: {\n                include: joinOrMergeIncludes(DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    deleteConsignment(\n        checkoutId: string,\n        consignmentId: string,\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = joinIncludes(DEFAULT_INCLUDES);\n\n        return this._requestSender.delete(url, { params: { include }, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError<T = any> extends RequestError {\n    constructor(response: Response<T>, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, { InternalErrorResponseBody, StorefrontErrorResponseBody } from './error-response-body';\nimport { mapFromInternalErrorResponse, mapFromPaymentErrorResponse, mapFromStorefrontErrorResponse, RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response<any>, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod<T = any> = (response: Response<T>, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction | UpdateSubscriptionsAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nfunction arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nfunction arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nfunction arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id !== undefined && a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n\nexport default arrayReplace;\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nfunction objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nfunction objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nfunction objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n\nexport default objectMerge;\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n    variantIdentificationToken?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction | ConsignmentAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { BillingAddressActionType, ContinueAsGuestAction } from '../billing';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction | ContinueAsGuestAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction | ContinueAsGuestAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction | ContinueAsGuestAction\n): Customer | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy, ValueKeyIteratee } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ValueKeyIteratee<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import PaymentInstrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: PaymentInstrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport PaymentInstrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentInstrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): PaymentInstrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionStarted:\n    case ShippingStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.WidgetInteractionFinished:\n    case ShippingStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { SignInEmail } from './signin-email';\n\nexport default interface SignInEmailState {\n    data?: SignInEmail;\n    errors: SignInEmailErrorsState;\n    statuses: SignInEmailStatusesState;\n}\n\nexport interface SignInEmailErrorsState {\n    sendError?: Error;\n}\n\nexport interface SignInEmailStatusesState {\n    isSending?: boolean;\n}\n\nexport const DEFAULT_STATE: SignInEmailState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { SignInEmail } from './signin-email';\nimport { SendSignInEmailAction, SignInEmailActionType } from './signin-email-actions';\nimport SignInEmailState, { DEFAULT_STATE, SignInEmailErrorsState, SignInEmailStatusesState } from './signin-email-state';\n\nexport default function signInEmailReducer(\n    state: SignInEmailState = DEFAULT_STATE,\n    action: Action\n): SignInEmailState {\n    const reducer = combineReducers<SignInEmailState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: SignInEmail | undefined,\n    action: SendSignInEmailAction\n): SignInEmail | undefined {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: SignInEmailErrorsState = DEFAULT_STATE.errors,\n    action: SendSignInEmailAction\n): SignInEmailErrorsState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(errors, 'sendError', undefined);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n        return objectSet(errors, 'sendError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SignInEmailStatusesState = DEFAULT_STATE.statuses,\n    action: SendSignInEmailAction\n): SignInEmailStatusesState {\n    switch (action.type) {\n    case SignInEmailActionType.SendSignInEmailRequested:\n        return objectSet(statuses, 'isSending', true);\n\n    case SignInEmailActionType.SendSignInEmailFailed:\n    case SignInEmailActionType.SendSignInEmailSucceeded:\n        return objectSet(statuses, 'isSending', false);\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface SubscriptionsState {\n    errors: SubscriptionsErrorsState;\n    statuses: SubscriptionsStatusesState;\n}\n\nexport interface SubscriptionsErrorsState {\n    updateError?: Error;\n}\n\nexport interface SubscriptionsStatusesState {\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: SubscriptionsState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\nimport { SubscriptionsActionType, UpdateSubscriptionsAction } from '../subscription';\n\nimport SubscriptionsState, { DEFAULT_STATE, SubscriptionsErrorsState, SubscriptionsStatusesState } from './subscriptions-state';\n\nexport default function subscriptionsReducer(\n    state: SubscriptionsState = DEFAULT_STATE,\n    action: Action\n): SubscriptionsState {\n    const reducer = combineReducers<SubscriptionsState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: SubscriptionsErrorsState = DEFAULT_STATE.errors,\n    action: UpdateSubscriptionsAction\n): SubscriptionsErrorsState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: SubscriptionsStatusesState = DEFAULT_STATE.statuses,\n    action: UpdateSubscriptionsAction\n): SubscriptionsStatusesState {\n    switch (action.type) {\n    case SubscriptionsActionType.UpdateSubscriptionsRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case SubscriptionsActionType.UpdateSubscriptionsFailed:\n    case SubscriptionsActionType.UpdateSubscriptionsSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isExecutingSpamCheck?: boolean;\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { SpamProtectionAction, SpamProtectionActionType } from '../spam-protection';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | SpamProtectionAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction | SpamProtectionAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case SpamProtectionActionType.ExecuteRequested:\n        return objectSet(statuses, 'isExecutingSpamCheck', true);\n\n    case SpamProtectionActionType.ExecuteFailed:\n    case SpamProtectionActionType.ExecuteSucceeded:\n        return objectSet(statuses, 'isExecutingSpamCheck', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default function guard<T>(value: T, errorFactory?: () => Error): NonNullable<T> {\n    if (value === undefined || value === null) {\n        throw errorFactory ? errorFactory() : new Error('An unexpected error has occurred.');\n    }\n\n    return value as NonNullable<T>;\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends object, TMap extends { [key: string]: T }>(map: TMap): TMap {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as { [key: string]: T }) as TMap;\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState, DEFAULT_STATE } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [], requiresState } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: requiresState == null ? false : requiresState,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: requiresState == null ? true : requiresState,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import PaymentInstrument from './instrument';\n\ninterface SupportedInstruments {\n    [key: string]: Pick<PaymentInstrument, 'method' | 'provider'>;\n}\n\nconst supportedInstruments: SupportedInstruments = {\n    'adyenv2.scheme': {\n        provider: 'adyenv2',\n        method: 'scheme',\n    },\n    'adyenv2.bcmc': {\n        provider: 'adyenv2',\n        method: 'bcmc',\n    },\n    'adyenv2.ideal': {\n        provider: 'adyenv2',\n        method: 'ideal',\n    },\n    'adyenv2.sepadirectdebit': {\n        provider: 'adyenv2',\n        method: 'sepadirectdebit',\n    },\n    'adyenv2.directEbanking': {\n        provider: 'adyenv2',\n        method: 'directEbanking',\n    },\n    'adyenv2.giropay': {\n        provider: 'adyenv2',\n        method: 'giropay',\n    },\n    braintree: {\n        provider: 'braintree',\n        method: 'credit_card',\n    },\n    braintreepaypal: {\n        provider: 'braintree',\n        method: 'paypal',\n    },\n    authorizenet: {\n        provider: 'authorizenet',\n        method: 'credit_card',\n    },\n    elavon: {\n        provider: 'elavon',\n        method: 'credit_card',\n    },\n    checkoutcom: {\n        provider: 'checkoutcom',\n        method: 'credit_card',\n    },\n    stripe: {\n        provider: 'stripe',\n        method: 'credit_card',\n    },\n    'stripev3.card': {\n        provider: 'stripev3',\n        method: 'card',\n    },\n    cybersource: {\n        provider: 'cybersource',\n        method: 'credit_card',\n    },\n    converge: {\n        provider: 'converge',\n        method: 'credit_card',\n    },\n    bluesnapv2: {\n        provider: 'bluesnapv2',\n        method: 'credit_card',\n    },\n    orbital: {\n        provider: 'orbital',\n        method: 'credit_card',\n    },\n    paymetric: {\n        provider: 'paymetric',\n        method: 'credit_card',\n    },\n    bolt: {\n        provider: 'bolt',\n        method: 'credit_card',\n    },\n    'barclaycard.credit_card': {\n        provider: 'barclaycard',\n        method: 'credit_card',\n    },\n};\n\nexport default supportedInstruments;\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createSignInEmailSelectorFactory } from '../signin-email';\nimport { createStoreCreditSelectorFactory } from '../store-credit';\nimport { createSubscriptionsSelectorFactory } from '../subscription';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n    const createSubscriptionsSelector = createSubscriptionsSelectorFactory();\n    const createSignInEmailSelector = createSignInEmailSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const subscriptions = createSubscriptionsSelector(state.subscriptions);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n        const signInEmail = createSignInEmailSelector(state.signInEmail);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            signInEmail,\n            subscriptions,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getBillingAddressOrThrow(): BillingAddress;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getBillingAddressOrThrow = createSelector(\n        getBillingAddress,\n        getBillingAddress => () => {\n            return guard(getBillingAddress(), () => new MissingDataError(MissingDataErrorType.MissingBillingAddress));\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getBillingAddressOrThrow: getBillingAddressOrThrow(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport { SignInEmail } from './signin-email';\nimport SignInEmailState, { DEFAULT_STATE } from './signin-email-state';\n\nexport default interface SignInEmailSelector {\n    getEmail(): SignInEmail | undefined;\n    getSendError(): Error | undefined;\n    isSending(): boolean;\n}\n\nexport type SignInEmailSelectorFactory = (state: SignInEmailState) => SignInEmailSelector;\n\nexport function createSignInEmailSelectorFactory(): SignInEmailSelectorFactory {\n    const getEmail = createSelector(\n        (state: SignInEmailState) => state.data,\n        signInEmail => () => signInEmail\n    );\n\n    const getSendError = createSelector(\n        (state: SignInEmailState) => state.errors.sendError,\n        error => () => error\n    );\n\n    const isSending = createSelector(\n        (state: SignInEmailState) => !!state.statuses.isSending,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SignInEmailState = DEFAULT_STATE\n    ): SignInEmailSelector => {\n        return {\n            getEmail: getEmail(state),\n            getSendError: getSendError(state),\n            isSending: isSending(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getCartOrThrow(): Cart;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getCartOrThrow = createSelector(\n        getCart,\n        getCart => () => {\n          return guard(getCart(), () => new MissingDataError(MissingDataErrorType.MissingCart));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getCartOrThrow: getCartOrThrow(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport Config, { ContextConfig, FlashMessage, FlashMessageType, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getFlashMessages(type?: FlashMessageType): FlashMessage[] | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getStoreConfigOrThrow(): StoreConfig;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getVariantIdentificationToken(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getFlashMessages = createSelector(\n        (state: ConfigState) => state.data,\n        data => (filterType?: FlashMessageType) => {\n            if (!data) {\n                return;\n            }\n\n            const { flashMessages } = data.context;\n\n            if (!flashMessages) {\n                return;\n            }\n\n            return filterType !== undefined ?\n                flashMessages.filter(({ type }) => filterType === type) :\n                flashMessages;\n        }\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getStoreConfigOrThrow = createSelector(\n        getStoreConfig,\n        getStoreConfig => () => {\n          return guard(getStoreConfig(), () => new MissingDataError(MissingDataErrorType.MissingCheckoutConfig));\n        }\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getVariantIdentificationToken = createSelector(\n        (state: ConfigState) => state.meta && state.meta.variantIdentificationToken,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getFlashMessages: getFlashMessages(state),\n            getStoreConfig: getStoreConfig(state),\n            getStoreConfigOrThrow: getStoreConfigOrThrow(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getVariantIdentificationToken: getVariantIdentificationToken(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { filter, flatMap, isMatch, values } from 'lodash';\n\nimport { createSelector } from '../../common/selector';\nimport PaymentMethod from '../payment-method';\n\nimport PaymentInstrument, { CardInstrument } from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\nimport supportedInstruments from './supported-payment-instruments';\n\nexport default interface InstrumentSelector {\n    getCardInstrument(instrumentId: string): CardInstrument | undefined;\n    getInstruments(): PaymentInstrument[] | undefined;\n    getInstrumentsByPaymentMethod(paymentMethod: PaymentMethod): PaymentInstrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstrumentsByPaymentMethod = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => (paymentMethod: PaymentMethod) => {\n            if (!instruments) {\n                return;\n            }\n\n            const paymentMethodKey = paymentMethod.gateway ? `${paymentMethod.gateway}.${paymentMethod.id}` : paymentMethod.id;\n\n            const currentMethod = supportedInstruments[paymentMethodKey];\n\n            if (!currentMethod) {\n                return [];\n            }\n\n            return filter<PaymentInstrument>(instruments, currentMethod);\n        }\n    );\n\n    const getCardInstrument = createSelector(\n        (state: InstrumentState) => state.data,\n        (instruments = []) => (instrumentId: string) => {\n            const cards = values(supportedInstruments);\n\n            return instruments.find((instrument): instrument is CardInstrument =>\n                instrument.bigpayToken === instrumentId &&\n                instrument.type === 'card' &&\n                cards.some(card => isMatch(instrument, card))\n            );\n        }\n    );\n\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => {\n            if (!instruments) {\n                return;\n            }\n\n            const allSupportedInstruments = flatMap(supportedInstruments, supportedProvider =>\n                filter(instruments, (instrument: PaymentInstrument): instrument is PaymentInstrument => {\n                    return isMatch(instrument, supportedProvider);\n                })\n            );\n\n            return allSupportedInstruments;\n        }\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getCardInstrument: getCardInstrument(state),\n            getInstruments: getInstruments(state),\n            getInstrumentsByPaymentMethod: getInstrumentsByPaymentMethod(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getPaymentMethodOrThrow(methodId: string, gatewayId ?: string): PaymentMethod;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getPaymentMethodOrThrow = createSelector(\n        getPaymentMethod,\n        getPaymentMethod => (methodId: string, gatewayId?: string) => {\n            return guard(getPaymentMethod(methodId, gatewayId), () => new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getPaymentMethodOrThrow: getPaymentMethodOrThrow(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: ShippingStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getCheckoutOrThrow(): Checkout;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isExecutingSpamCheck(): boolean;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getCheckoutOrThrow = createSelector(\n        getCheckout,\n        getCheckout => () => {\n            return guard(getCheckout(), () => new MissingDataError(MissingDataErrorType.MissingCheckout));\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isExecutingSpamCheck = createSelector(\n        (state: CheckoutState) => state.statuses.isExecutingSpamCheck,\n        isExecutingSpamCheck => () => isExecutingSpamCheck === true\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getCheckoutOrThrow: getCheckoutOrThrow(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isExecutingSpamCheck: isExecutingSpamCheck(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { guard } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderOrThrow(): Order;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderOrThrow = createSelector(\n        getOrder,\n        getOrder => () => {\n            return guard(getOrder(), () => new MissingDataError(MissingDataErrorType.MissingOrder));\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderOrThrow: getOrderOrThrow(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport SubscriptionsState, { DEFAULT_STATE } from './subscriptions-state';\n\nexport default interface SubscriptionsSelector {\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type SubscriptionsSelectorFactory = (state: SubscriptionsState) => SubscriptionsSelector;\n\nexport function createSubscriptionsSelectorFactory(): SubscriptionsSelectorFactory {\n    const getUpdateError = createSelector(\n        (state: SubscriptionsState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: SubscriptionsState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: SubscriptionsState = DEFAULT_STATE\n    ): SubscriptionsSelector => {\n        return {\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { signInEmailReducer } from '../signin-email';\nimport { storeCreditReducer } from '../store-credit';\nimport { subscriptionsReducer } from '../subscription';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        signInEmail: signInEmailReducer,\n        subscriptions: subscriptionsReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinOrMergeIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get<Checkout>(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params: { include } = {}, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinOrMergeIncludes(CHECKOUT_DEFAULT_INCLUDES, include),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[] | CheckoutIncludeParam;\n}\n\nexport type CheckoutIncludeParam = {\n    [key in CheckoutIncludes]?: boolean;\n};\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    AMAZON_PAY_V2 = 'amazonpay',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_ADYENV2 = 'googlepayadyenv2',\n    GOOGLEPAY_AUTHORIZENET = 'googlepayauthorizenet',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_CHECKOUTCOM = 'googlepaycheckoutcom',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n    PAYPALCOMMERCE = 'paypalcommerce',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { AmazonPayV2ButtonParams, AmazonPayV2PaymentProcessor, AmazonPayV2PayOptions, AmazonPayV2Placement } from '../../../payment/strategies/amazon-pay-v2';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nimport { AmazonPayV2ButtonInitializeOptions } from './amazon-pay-v2-button-options';\n\nexport default class AmazonPayV2ButtonStrategy implements CheckoutButtonStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _amazonPayV2PaymentProcessor: AmazonPayV2PaymentProcessor\n    ) { }\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId, amazonpay } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" or \"methodId\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethodOrThrow(methodId);\n\n        await this._amazonPayV2PaymentProcessor.initialize(paymentMethod);\n        this._walletButton = await this._createSignInButton(containerId, paymentMethod, amazonpay);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private async _createSignInButton(containerId: string, paymentMethod: PaymentMethod, options?: AmazonPayV2ButtonInitializeOptions): Promise<HTMLElement> {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const amazonButtonOptions = options ?? await this._getAmazonPayV2ButtonOptions(paymentMethod);\n\n        this._amazonPayV2PaymentProcessor.createButton(`#${containerId}`, amazonButtonOptions);\n\n        return container;\n    }\n\n    private async _getAmazonPayV2ButtonOptions(paymentMethod: PaymentMethod): Promise<AmazonPayV2ButtonParams> {\n        const state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const cart = state.cart.getCart();\n        const { storeProfile: { shopPath } } = state.config.getStoreConfigOrThrow();\n\n        const {\n            config: {\n                merchantId,\n                testMode,\n            },\n            initializationData: {\n                checkoutLanguage,\n                ledgerCurrency,\n                checkoutSessionMethod,\n                extractAmazonCheckoutSessionId,\n            },\n        } = paymentMethod;\n\n        if (!merchantId || !ledgerCurrency || !shopPath) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            merchantId,\n            createCheckoutSession: {\n                url: `${shopPath}/remote-checkout/${paymentMethod.id}/payment-session`,\n                method: checkoutSessionMethod,\n                extractAmazonCheckoutSessionId,\n            },\n            sandbox: !!testMode,\n            ledgerCurrency,\n            checkoutLanguage,\n            productType: cart && getShippableItemsCount(cart) === 0 ?\n                AmazonPayV2PayOptions.PayOnly :\n                AmazonPayV2PayOptions.PayAndShip,\n            placement: AmazonPayV2Placement.Cart,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeError, BraintreePaypalCheckout, BraintreeShippingAddressOverride, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.shippingAddress, paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(\n        address?: Address | null,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const shippingAddress = address === undefined ?\n                    customer && customer.addresses && customer.addresses[0] :\n                    address;\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: shippingAddress ? this._mapToBraintreeAddress(shippingAddress) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: payload.details.firstName,\n                last_name: payload.details.lastName,\n                phone_number: payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeShippingAddressOverride {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { getShippableItemsCount } from '../../../shipping';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        await this._googlePayPaymentProcessor.initialize(this._getMethodId());\n\n        this._walletButton = this._createSignInButton(containerId);\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private async _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n        const cart = this._store.getState().cart.getCartOrThrow();\n        const hasPhysicalItems = getShippableItemsCount(cart) > 0;\n\n        try {\n            const paymentData = await this._googlePayPaymentProcessor.displayWallet();\n            await this._googlePayPaymentProcessor.handleSuccess(paymentData);\n            if (hasPhysicalItems && paymentData.shippingAddress) {\n                await this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n            }\n            await this._onPaymentSelectComplete();\n        } catch (error) {\n            if (error && error.message !== 'CANCELED') {\n                throw error;\n            }\n        }\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paypalScriptLoader.loadPaypal(paymentMethod.config.merchantId)\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { Cart } from '../../../cart';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { ApproveDataOptions, ButtonsOptions, ClickDataOptions, DisableFundingType, PaypalCommerceInitializationData, PaypalCommercePaymentProcessor, PaypalCommerceScriptOptions } from '../../../payment/strategies/paypal-commerce';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalCommerceButtonStrategy implements CheckoutButtonStrategy {\n    private _isCredit?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _formPoster: FormPoster,\n        private _paypalCommercePaymentProcessor: PaypalCommercePaymentProcessor\n    ) {}\n\n    async initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        let state = this._store.getState();\n        const { initializationData } = state.paymentMethods.getPaymentMethodOrThrow(options.methodId);\n\n        if (!initializationData.clientId) {\n            throw new InvalidArgumentError();\n        }\n\n        state = await this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout());\n        const cart = state.cart.getCartOrThrow();\n        const buttonParams: ButtonsOptions = {\n            onApprove: data => this._tokenizePayment(data),\n            onClick: data => this._handleClickButtonProvider(data),\n        };\n\n        if (options.paypalCommerce && options.paypalCommerce.style) {\n            buttonParams.style = options.paypalCommerce.style;\n        }\n\n        await this._paypalCommercePaymentProcessor.initialize({ options: this._getParamsScript(initializationData, cart) });\n\n        this._paypalCommercePaymentProcessor.renderButtons(cart.id, `#${options.containerId}`, buttonParams);\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._isCredit = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _handleClickButtonProvider({ fundingSource }: ClickDataOptions): void {\n        this._isCredit = fundingSource === 'credit';\n    }\n\n    private _tokenizePayment({ orderID }: ApproveDataOptions) {\n        if (!orderID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._formPoster.postForm('/checkout.php', {\n            payment_type: 'paypal',\n            action: 'set_external_checkout',\n            provider: this._isCredit ? 'paypalcommercecredit' : 'paypalcommerce',\n            order_id: orderID,\n        });\n    }\n\n    private _getParamsScript(initializationData: PaypalCommerceInitializationData, cart: Cart): PaypalCommerceScriptOptions {\n        const { clientId, intent, isPayPalCreditAvailable, merchantId } = initializationData;\n        const disableFunding: DisableFundingType = [ 'card' ];\n\n        if (!isPayPalCreditAvailable) {\n            disableFunding.push('credit');\n        }\n\n        return {\n            clientId,\n            merchantId,\n            commit: false,\n            currency: cart.currency.code,\n            disableFunding,\n            intent,\n        };\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { createAmazonPayV2PaymentProcessor } from '../payment/strategies/amazon-pay-v2';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayAdyenV2Initializer, GooglePayAuthorizeNetInitializer, GooglePayBraintreeInitializer, GooglePayCheckoutcomInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\nimport { createPaypalCommercePaymentProcessor } from '../payment/strategies/paypal-commerce';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { AmazonPayV2ButtonStrategy } from './strategies/amazon-pay-v2';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\nimport { PaypalCommerceButtonStrategy } from './strategies/paypal-commerce';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const paypalCommercePaymentProcessor = createPaypalCommercePaymentProcessor(scriptLoader, requestSender);\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_ADYENV2, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAdyenV2Initializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_AUTHORIZENET, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayAuthorizeNetInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_CHECKOUTCOM, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayCheckoutcomInitializer(requestSender)\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALCOMMERCE, () =>\n        new PaypalCommerceButtonStrategy(\n            store,\n            checkoutActionCreator,\n            formPoster,\n            paypalCommercePaymentProcessor\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.AMAZON_PAY_V2, () =>\n        new AmazonPayV2ButtonStrategy(\n            store,\n            checkoutActionCreator,\n            createAmazonPayV2PaymentProcessor()\n        )\n    );\n\n    return registry;\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError<T = any> extends RequestError<T> {\n    constructor(response?: Response<T>) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Subscriptions } from './subscriptions';\n\nexport enum SubscriptionsActionType {\n    UpdateSubscriptionsRequested = 'UPDATE_SUBSCRIPTIONS_REQUESTED',\n    UpdateSubscriptionsSucceeded = 'UPDATE_SUBSCRIPTIONS_SUCCEEDED',\n    UpdateSubscriptionsFailed = 'UPDATE_SUBSCRIPTIONS_FAILED',\n}\nexport type UpdateSubscriptionsAction =\n    UpdateSubscriptionsRequestedAction |\n    UpdateSubscriptionsSucceededAction |\n    UpdateSubscriptionsFailedAction;\n\nexport interface UpdateSubscriptionsRequestedAction extends Action {\n    type: SubscriptionsActionType.UpdateSubscriptionsRequested;\n}\n\nexport interface UpdateSubscriptionsSucceededAction extends Action<Subscriptions> {\n    type: SubscriptionsActionType.UpdateSubscriptionsSucceeded;\n}\n\nexport interface UpdateSubscriptionsFailedAction extends Action<Error> {\n    type: SubscriptionsActionType.UpdateSubscriptionsFailed;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { Subscriptions } from './subscriptions';\n\nexport default class SubscriptionsRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    updateSubscriptions(subscriptions: Subscriptions, { timeout }: RequestOptions = {}): Promise<Response<Subscriptions>> {\n        const url = '/api/storefront/subscriptions';\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: subscriptions, headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload, TokenizeType } from './googlepay';\n\nexport default class GooglePayAdyenV2Initializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type: type as TokenizeType,\n            nonce: token,\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                gatewayMerchantId,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'adyen',\n                        gatewayMerchantId,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { round } from 'lodash';\n\nimport { PaymentMethod } from '../..';\nimport { Checkout } from '../../../checkout';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizationSpecification, TokenizePayload, TokenizeType } from './googlepay';\n\nconst baseRequest = {\n    apiVersion: 2,\n    apiVersionMinor: 0,\n};\n\nexport default class GooglePayAuthorizeNetInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(\n            this._getGooglePaymentDataRequest(checkout, paymentMethod, hasShippingAddress)\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const {\n            paymentMethodData: {\n                type,\n                tokenizationData: { token },\n                info: {\n                    cardNetwork: cardType,\n                    cardDetails: lastFour,\n                },\n            },\n        } = paymentData;\n\n        return Promise.resolve({\n            type: type as TokenizeType,\n            nonce: btoa(token),\n            details: {\n                cardType,\n                lastFour,\n            },\n        });\n    }\n\n    private _getGooglePaymentDataRequest(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                paymentGatewayId: gatewayMerchantId,\n                storeCountry: countryCode,\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        const paymentGatewaySpecification = this._getPaymentGatewaySpecification(gatewayMerchantId);\n        const cardPaymentMethod = this._getCardPaymentMethod(paymentGatewaySpecification, supportedCards);\n\n        return {\n            ...baseRequest,\n            allowedPaymentMethods: [cardPaymentMethod],\n            transactionInfo: {\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n                currencyCode,\n                countryCode,\n            },\n            merchantInfo : {\n                merchantName,\n                merchantId,\n                authJwt,\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n\n    private _getPaymentGatewaySpecification(gatewayMerchantId: string) {\n        return {\n            type: 'PAYMENT_GATEWAY',\n            parameters: {\n                gateway: 'authorizenet',\n                gatewayMerchantId,\n            },\n        };\n    }\n\n    private _getCardPaymentMethod(tokenizationSpecification: TokenizationSpecification, supportedCards: string[]) {\n        return {\n            type: 'CARD',\n            parameters: {\n                allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                billingAddressRequired: true,\n                billingAddressParameters: {\n                    format: BillingAddressFormat.Full,\n                    phoneNumberRequired: true,\n                },\n            },\n            tokenizationSpecification,\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return Promise.resolve({\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        });\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { ContentType } from '../../../common/http-request';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\nimport { CheckoutcomGooglePayToken, CheckoutcomToken } from '../checkoutcom';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayCheckoutcomInitializer implements GooglePayInitializer {\n    private _publishableKey: string = '';\n    private _testMode: boolean = true;\n\n    constructor(\n       private _requestSender: RequestSender\n    ) {}\n\n    async initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        this._publishableKey = paymentMethod.initializationData.checkoutcomkey;\n        this._testMode = !!paymentMethod.config.testMode;\n\n        return this._mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        );\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    async parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        let token;\n        try {\n            token = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n\n        if (!token.signature || !token.protocolVersion || !token.signedMessage) {\n            throw new PaymentMethodFailedError('Unable to parse response from Google Pay.');\n        }\n        const finalToken = await this._convertToken(this._testMode, this._publishableKey, token);\n\n        return {\n            nonce: finalToken,\n            type: 'CreditCard',\n            description: paymentData.paymentMethodData.description,\n            details: {\n                cardType: paymentData.paymentMethodData.info.cardNetwork,\n                lastFour: paymentData.paymentMethodData.info.cardDetails,\n            },\n        };\n    }\n\n    private async _convertToken(testMode: boolean, checkoutcomkey: string, token: CheckoutcomGooglePayToken): Promise<string> {\n        if (!token || !token.protocolVersion) {\n            throw new PaymentMethodFailedError('Unable to parse response from GooglePay.');\n        }\n\n        const checkoutcomToken: CheckoutcomToken = await this._requestCheckoutcomTokenize(testMode, checkoutcomkey, {\n            type: 'googlepay',\n            token_data: token,\n        });\n\n        if (!checkoutcomToken || !checkoutcomToken.token) {\n            throw new PaymentMethodFailedError('Unable to parse response from Checkout.com');\n        }\n\n        return checkoutcomToken.token;\n    }\n\n    private async _requestCheckoutcomTokenize(testMode: boolean, checkoutcomKey: string, data = {}): Promise<CheckoutcomToken> {\n        const TEST_URL: string = 'https://api.sandbox.checkout.com/tokens';\n        const LIVE_URL: string = 'https://api.checkout.com/tokens';\n\n        const url = testMode ? TEST_URL : LIVE_URL;\n\n        const response = await this._requestSender.post(url, {\n            credentials: false,\n            body: data,\n            headers: {\n                'Content-Type': ContentType.Json,\n                Authorization: checkoutcomKey,\n                'X-XSRF-TOKEN': null,\n            },\n        });\n\n        return response.body as CheckoutcomToken;\n    }\n\n    private _mapGooglePayCheckoutcomDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'checkoutltd',\n                        gatewayMerchantId: initializationData.checkoutcomkey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { BillingAddressFormat, GooglePaymentData, GooglePayInitializer, GooglePayPaymentDataRequestV2, TokenizePayload } from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._getGooglePayPaymentDataRequest(\n            checkout,\n            paymentMethod,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): Promise<TokenizePayload> {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return Promise.resolve({\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            });\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _getGooglePayPaymentDataRequest(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        const {\n            outstandingBalance,\n            cart: {\n                currency: { code: currencyCode },\n            },\n        } = checkout;\n\n        const {\n            initializationData: {\n                googleMerchantName: merchantName,\n                googleMerchantId: merchantId,\n                platformToken: authJwt,\n                stripeVersion,\n                stripePublishableKey,\n                stripeConnectedAccount,\n            },\n            supportedCards,\n        } = paymentMethod;\n\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt,\n                merchantId,\n                merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: supportedCards.map(card => card === 'MC' ? 'MASTERCARD' : card),\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: BillingAddressFormat.Full,\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': stripeVersion,\n                        'stripe:publishableKey': `${stripePublishableKey}/${stripeConnectedAccount}`,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypal(merchantId: string = ''): Promise<PaypalSDK> {\n        const scriptSrc = '//www.paypalobjects.com/api/checkout.min.js';\n        const options: LoadScriptOptions = { async: true, attributes: { 'data-merchant-id': merchantId } };\n\n        merchantId\n            ? await this._scriptLoader.loadScript(scriptSrc, options)\n            : await this._scriptLoader.loadScript(scriptSrc);\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutButtonInitializer } from '../checkout-buttons';\n","\nexport interface ApproveDataOptions {\n    orderID: string;\n}\n\nexport interface ClickDataOptions {\n    fundingSource: string;\n}\n\nexport interface OrderData {\n    orderId: string;\n    approveUrl: string;\n}\n\nexport enum StyleButtonLabel {\n    paypal = 'paypal',\n    checkout = 'checkout',\n    buynow = 'buynow',\n    pay = 'pay',\n    installment = 'installment',\n}\n\nexport enum StyleButtonLayout {\n    vertical = 'vertical',\n    horizontal = 'horizontal',\n}\n\nexport enum StyleButtonColor {\n    gold = 'gold',\n    blue = 'blue',\n    silver = 'silver',\n    black = 'black',\n    white = 'white',\n}\n\nexport enum StyleButtonShape {\n    pill = 'pill',\n    rect = 'rect' ,\n}\n\nexport interface PaypalButtonStyleOptions {\n    layout?: StyleButtonLayout;\n    color?: StyleButtonColor;\n    shape?: StyleButtonShape;\n    height?: 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55;\n    label?: StyleButtonLabel;\n    tagline?: boolean;\n}\n\nexport interface ButtonsOptions {\n    style?: PaypalButtonStyleOptions;\n    fundingSource?: string;\n    createOrder?(): Promise<string>;\n    onApprove?(data: ApproveDataOptions): void;\n    onClick?(data: ClickDataOptions): void;\n}\n\nexport interface PaypalCommerceHostedFieldOption {\n    selector: string;\n    placeholder?: string;\n}\n\nexport interface PaypalCommerceHostedFieldsRenderOptions {\n    fields?: {\n        number?: PaypalCommerceHostedFieldOption;\n        cvv?: PaypalCommerceHostedFieldOption;\n        expirationDate?: PaypalCommerceHostedFieldOption;\n    };\n    paymentsSDK?: boolean;\n    styles?: {\n        input?: { [key: string]: string };\n        '.invalid'?: { [key: string]: string };\n        '.valid'?: { [key: string]: string };\n        ':focus'?: { [key: string]: string };\n    };\n    createOrder(): Promise<string>;\n}\n\nexport interface PaypalCommerceHostedFields {\n    submit(): { orderId: string };\n    on(eventName: string, callback: (event: PaypalCommerceHostedFieldsState) => void): void;\n}\n\nexport interface PaypalCommerceHostedFieldsState {\n    cards: PaypalCommerceHostedFieldsCard[];\n    emittedBy: string;\n    fields: {\n        number?: PaypalCommerceHostedFieldsFieldData;\n        expirationDate?: PaypalCommerceHostedFieldsFieldData;\n        expirationMonth?: PaypalCommerceHostedFieldsFieldData;\n        expirationYear?: PaypalCommerceHostedFieldsFieldData;\n        cvv?: PaypalCommerceHostedFieldsFieldData;\n        postalCode?: PaypalCommerceHostedFieldsFieldData;\n    };\n}\n\nexport interface PaypalCommerceHostedFieldsCard {\n    type: string;\n    niceType: string;\n    code: { name: string; size: number };\n}\n\nexport interface PaypalCommerceHostedFieldsFieldData {\n    container: HTMLElement;\n    isFocused: boolean;\n    isEmpty: boolean;\n    isPotentiallyValid: boolean;\n    isValid: boolean;\n}\n\nexport interface PaypalCommerceButtons {\n    render(id: string): void;\n    close(): void;\n    isEligible(): boolean;\n}\n\nexport interface PaypalCommerceSDKFunding {\n    PAYPAL: string;\n    CREDIT: string;\n}\n\nexport interface PaypalCommerceSDK {\n    FUNDING: PaypalCommerceSDKFunding;\n    HostedFields: {\n        isEligible(): boolean;\n        render(data: PaypalCommerceHostedFieldsRenderOptions): Promise<PaypalCommerceHostedFields>;\n    };\n    Buttons(params: ButtonsOptions): PaypalCommerceButtons;\n}\n\nexport interface PaypalCommerceHostWindow extends Window {\n    paypal?: PaypalCommerceSDK;\n}\n\nexport interface PaypalCommerceInitializationData {\n    clientId: string;\n    merchantId?: string;\n    intent?: 'capture' | 'authorize';\n    isPayPalCreditAvailable?: boolean;\n    isProgressiveOnboardingAvailable?: boolean;\n    clientToken?: string;\n}\n\nexport type DisableFundingType = Array<'credit' | 'card'>;\n\nexport type ComponentsScriptType = Array<'buttons' | 'hosted-fields'>;\n\nexport interface PaypalCommerceScriptOptions {\n    clientId: string;\n    merchantId?: string;\n    currency?: string;\n    commit?: boolean;\n    intent?: 'capture' | 'authorize';\n    disableFunding?: DisableFundingType;\n    components?: ComponentsScriptType;\n}\n\nexport interface PaypalCommerceScriptAttribute {\n    clientToken?: string;\n    partnerAttributionId?: string;\n}\n","import { LoadScriptOptions, ScriptLoader } from '@bigcommerce/script-loader';\nimport { isNil, kebabCase } from 'lodash';\n\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalCommerceHostWindow, PaypalCommerceScriptAttribute, PaypalCommerceScriptOptions, PaypalCommerceSDK } from './paypal-commerce-sdk';\n\nexport interface DataPaypalCommerceScript {\n    options: PaypalCommerceScriptOptions;\n    attr?: PaypalCommerceScriptAttribute;\n}\n\nexport default class PaypalCommerceScriptLoader {\n    private _window: PaypalCommerceHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    async loadPaypalCommerce({options, attr}: DataPaypalCommerceScript, isProgressiveOnboardingAvailable?: boolean): Promise<PaypalCommerceSDK> {\n        this._validateParams(options, isProgressiveOnboardingAvailable);\n\n        let attributes: LoadScriptOptions['attributes'] = {};\n        const { disableFunding } = options;\n        const updatedOptions = disableFunding\n            ? { ...options, disableFunding: disableFunding.join(',') }\n            : options;\n\n        const params = (Object.keys(updatedOptions) as Array<keyof PaypalCommerceScriptOptions>)\n            .filter(key => !isNil(options[key]))\n            .map(key => `${kebabCase(key)}=${options[key]}`)\n            .join('&');\n\n        if (attr) {\n            attributes = (Object.keys(attr) as Array<keyof PaypalCommerceScriptAttribute>)\n                .reduce((attributes, key) =>\n                    attr[key] ? { ...attributes, [`data-${kebabCase(key)}`]: attr[key] } : attributes\n                , {});\n        }\n\n        const scriptSrc = `https://www.paypal.com/sdk/js?${params}`;\n\n        await this._scriptLoader.loadScript(scriptSrc, { async: true, attributes });\n\n        if (!this._window.paypal) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.paypal;\n    }\n\n    _validateParams(options: PaypalCommerceScriptOptions, isProgressiveOnboardingAvailable?: boolean): void {\n        const CLIENT_ID = 'clientId';\n        const MERCHANT_ID = 'merchantId';\n        let param;\n\n        if (!options) {\n            param = 'options';\n        } else if (!options[CLIENT_ID]) {\n            param = CLIENT_ID;\n        } else if (!options[MERCHANT_ID] && !isProgressiveOnboardingAvailable) {\n            param = MERCHANT_ID;\n        }\n\n        if (param) {\n            throw new InvalidArgumentError(`Unable to proceed because \"${param}\" argument in PayPal script is not provided.`);\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\n\nimport { OrderData } from './paypal-commerce-sdk';\n\nexport interface ParamsForProvider {\n    isCredit?: boolean;\n    isCheckout?: boolean;\n    isCreditCard?: boolean;\n}\n\nexport default class PaypalCommerceRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    async setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<OrderData> {\n        const { isCredit, isCheckout, isCreditCard } = params;\n        let provider = 'paypalcommerce';\n\n        if (isCreditCard) {\n            provider = 'paypalcommercecreditcardscheckout';\n        } else if (isCheckout) {\n            provider = isCredit ? 'paypalcommercecreditcheckout' : 'paypalcommercecheckout';\n        } else if (isCredit) {\n            provider = 'paypalcommercecredit';\n        }\n\n        const url = `/api/storefront/payment/${provider}`;\n        const body = { cartId };\n        const headers = {\n            'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            'Content-Type': ContentType.Json,\n        };\n\n        const res = await this._requestSender.post(url, { headers, body });\n\n        return res.body as OrderData;\n    }\n}\n","import { NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { ButtonsOptions, DataPaypalCommerceScript, ParamsForProvider, PaypalButtonStyleOptions, PaypalCommerceButtons, PaypalCommerceHostedFields, PaypalCommerceHostedFieldsRenderOptions, PaypalCommerceHostedFieldsState, PaypalCommerceRequestSender, PaypalCommerceScriptLoader, PaypalCommerceSDK, PaypalCommerceSDKFunding, StyleButtonColor, StyleButtonLabel, StyleButtonLayout, StyleButtonShape } from './index';\n\nexport interface OptionalParamsRenderButtons {\n    paramsForProvider?: ParamsForProvider;\n    fundingKey?: keyof PaypalCommerceSDKFunding;\n    onRenderButton?(): void;\n}\n\nexport interface ParamsRenderHostedFields {\n    fields: PaypalCommerceHostedFieldsRenderOptions['fields'];\n    styles?: PaypalCommerceHostedFieldsRenderOptions['styles'];\n}\n\ninterface EventsHostedFields {\n    blur?(event: PaypalCommerceHostedFieldsState): void;\n    focus?(event: PaypalCommerceHostedFieldsState): void;\n    cardTypeChange?(event: PaypalCommerceHostedFieldsState): void;\n    validityChange?(event: PaypalCommerceHostedFieldsState): void;\n    inputSubmitRequest?(event: PaypalCommerceHostedFieldsState): void;\n}\n\nexport default class PaypalCommercePaymentProcessor {\n    private _paypal?: PaypalCommerceSDK;\n    private _paypalButtons?: PaypalCommerceButtons;\n    private _hostedFields?: PaypalCommerceHostedFields;\n    private _fundingSource?: string;\n\n    constructor(\n        private _paypalScriptLoader: PaypalCommerceScriptLoader,\n        private _paypalCommerceRequestSender: PaypalCommerceRequestSender\n    ) {}\n\n    async initialize(paramsScript: DataPaypalCommerceScript, isProgressiveOnboardingAvailable?: boolean): Promise<PaypalCommerceSDK> {\n        this._paypal = await this._paypalScriptLoader.loadPaypalCommerce(paramsScript, isProgressiveOnboardingAvailable);\n\n        return this._paypal;\n    }\n\n    renderButtons(cartId: string, container: string, params: ButtonsOptions = {}, optionalParams: OptionalParamsRenderButtons = {}): PaypalCommerceButtons {\n        if (!this._paypal || !this._paypal.Buttons) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const { paramsForProvider, fundingKey, onRenderButton } = optionalParams;\n\n        const buttonParams: ButtonsOptions = {\n            ...params,\n            createOrder: () => this._setupPayment(cartId, paramsForProvider),\n            onClick: data => {\n                this._fundingSource = data.fundingSource;\n\n                params.onClick?.(data);\n            },\n        };\n\n        if (params.style) {\n            buttonParams.style = this._validateStyleParams(params.style);\n        }\n\n        if (fundingKey) {\n            this._fundingSource = this._paypal.FUNDING[fundingKey];\n            buttonParams.fundingSource = this._fundingSource;\n        }\n\n        this._paypalButtons = this._paypal.Buttons(buttonParams);\n\n        if (!this._paypalButtons.isEligible()) {\n            throw new NotImplementedError(`PayPal ${this._fundingSource || ''} is not available for your region. Please use PayPal Checkout instead.`);\n        }\n\n        onRenderButton?.();\n\n        this._paypalButtons.render(container);\n\n        return this._paypalButtons;\n    }\n\n    async renderHostedFields(cartId: string, params: ParamsRenderHostedFields, events?: EventsHostedFields): Promise<void> {\n        if (!this._paypal || !this._paypal.HostedFields) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        const { fields, styles } = params;\n\n        if (!this._paypal.HostedFields.isEligible()) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._hostedFields = await this._paypal.HostedFields.render({\n            fields,\n            styles,\n            paymentsSDK: true,\n            createOrder: () => this._setupPayment(cartId, { isCreditCard: true }),\n        });\n\n        if (events) {\n            (Object.keys(events) as Array<keyof EventsHostedFields>).forEach(key => {\n                (this._hostedFields as PaypalCommerceHostedFields).on(key, events[key] as (event: PaypalCommerceHostedFieldsState) => void);\n            });\n        }\n    }\n\n    async submitHostedFields(): Promise<{orderId: string}> {\n        if (!this._hostedFields) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._hostedFields.submit();\n    }\n\n    deinitialize() {\n        this._paypalButtons?.close();\n\n        this._paypal = undefined;\n        this._paypalButtons = undefined;\n        this._fundingSource = undefined;\n        this._hostedFields = undefined;\n    }\n\n    private async _setupPayment(cartId: string, params: ParamsForProvider = {}): Promise<string> {\n        const paramsForProvider = { ...params, isCredit: this._fundingSource === 'credit' };\n        const { orderId } = await this._paypalCommerceRequestSender.setupPayment(cartId, paramsForProvider);\n\n        return orderId;\n    }\n\n    private _validateStyleParams = (style: PaypalButtonStyleOptions): PaypalButtonStyleOptions  => {\n        const updatedStyle: PaypalButtonStyleOptions = { ...style };\n        const { label, color, layout, shape, height, tagline } = style;\n\n        if (label && !StyleButtonLabel[label]) {\n            delete updatedStyle.label;\n        }\n\n        if (layout && !StyleButtonLayout[layout]) {\n            delete updatedStyle.layout;\n        }\n\n        if (color && !StyleButtonColor[color]) {\n            delete updatedStyle.color;\n        }\n\n        if (shape && !StyleButtonShape[shape]) {\n            delete updatedStyle.shape;\n        }\n\n        if (typeof height === 'number') {\n            updatedStyle.height = height < 25\n                ? 25\n                : (height > 55 ? 55 : height);\n        } else {\n            delete updatedStyle.height;\n        }\n\n        if (typeof tagline !== 'boolean' || (tagline && updatedStyle.layout !== StyleButtonLayout[StyleButtonLayout.horizontal])) {\n            delete updatedStyle.tagline;\n        }\n\n        return updatedStyle;\n    };\n\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaypalCommercePaymentProcessor, PaypalCommerceRequestSender, PaypalCommerceScriptLoader } from './index';\n\nexport default function createPaypalCommercePaymentProcessor(scriptLoader: ScriptLoader, requestSender: RequestSender) {\n    const paypalScriptLoader = new PaypalCommerceScriptLoader(scriptLoader);\n    const paypalCommerceRequestSender = new PaypalCommerceRequestSender(requestSender);\n\n    return new PaypalCommercePaymentProcessor(paypalScriptLoader, paypalCommerceRequestSender);\n}\n","import { PaymentMethod } from '../..';\nimport { AmazonPayV2ButtonInitializeOptions } from '../../../checkout-buttons/strategies/amazon-pay-v2';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport { AmazonPayV2ChangeActionType, AmazonPayV2SDK } from './amazon-pay-v2';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default class AmazonPayV2PaymentProcessor {\n    private _amazonPayV2SDK?: AmazonPayV2SDK;\n\n    constructor(\n        private _amazonPayV2ScriptLoader: AmazonPayV2ScriptLoader\n    ) { }\n\n    async initialize(paymentMethod: PaymentMethod): Promise<void> {\n        this._amazonPayV2SDK = await this._amazonPayV2ScriptLoader.load(paymentMethod);\n    }\n\n    deinitialize(): Promise<void> {\n        this._amazonPayV2SDK = undefined;\n\n        return Promise.resolve();\n    }\n\n    bindButton(buttonId: string, sessionId: string, changeAction: AmazonPayV2ChangeActionType): void {\n        this._getAmazonPayV2SDK().Pay.bindChangeAction(`#${buttonId}`, {\n            amazonCheckoutSessionId: sessionId,\n            changeAction,\n        });\n    }\n\n    createButton(containerId: string, options: AmazonPayV2ButtonInitializeOptions): HTMLElement {\n        return this._getAmazonPayV2SDK().Pay.renderButton(containerId, options);\n    }\n\n    signout(): Promise<void> {\n        this._getAmazonPayV2SDK().Pay.signout();\n\n        return Promise.resolve();\n    }\n\n    private _getAmazonPayV2SDK(): AmazonPayV2SDK {\n        if (!this._amazonPayV2SDK) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._amazonPayV2SDK;\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport PaymentMethod from '../../payment-method';\n\nimport { AmazonPayV2HostWindow, AmazonPayV2Regions, AmazonPayV2SDK } from './amazon-pay-v2';\n\nfunction isAmazonPayV2Region(region: string): region is keyof typeof AmazonPayV2Regions {\n    return Object.keys(AmazonPayV2Regions).indexOf(region) !== -1;\n}\n\nexport default class AmazonPayV2ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: AmazonPayV2HostWindow = window\n    ) {}\n\n    async load(method: PaymentMethod): Promise<AmazonPayV2SDK> {\n        const {\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const amazonPayV2Region: AmazonPayV2Regions = isAmazonPayV2Region(region)\n            ? AmazonPayV2Regions[region]\n            : AmazonPayV2Regions.us;\n\n        await this._scriptLoader.loadScript(`https://static-${amazonPayV2Region}.payments-amazon.com/checkout.js`);\n\n        if (!this._window.amazon) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return this._window.amazon;\n    }\n}\n","import { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport AmazonPayV2PaymentProcessor from './amazon-pay-v2-payment-processor';\nimport AmazonPayV2ScriptLoader from './amazon-pay-v2-script-loader';\n\nexport default function createAmazonPayV2PaymentProcessor(): AmazonPayV2PaymentProcessor {\n    return new AmazonPayV2PaymentProcessor(\n        new AmazonPayV2ScriptLoader(getScriptLoader())\n    );\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport { PaymentMethodInvalidError } from '../../errors';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport { ButtonColor, ButtonType, EnvironmentType, GooglePaymentData, GooglePayAddress, GooglePayClient, GooglePayInitializer, GooglePayPaymentDataRequestV2, GooglePaySDK, TokenizePayload } from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._googlePayInitializer.parseResponse(paymentData)\n            .then(tokenizePayload => this._postForm(tokenizePayload))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport { SubscriptionsActionCreator, SubscriptionsRequestSender } from '../../../subscription';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender),\n            new SubscriptionsActionCreator(\n                new SubscriptionsRequestSender(requestSender)\n            )\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { RequestError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the subscriptions fails to be updated\n */\nexport default class UpdateSubscriptionsError extends RequestError {\n    constructor(response?: Response) {\n        super(response);\n\n        this.name = 'UpdateSubscriptionsError';\n        this.type = 'update_subscriptions';\n    }\n}\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { Subscriptions, SubscriptionsActionType, SubscriptionsRequestSender, UpdateSubscriptionsAction } from '../subscription';\n\nimport { UpdateSubscriptionsError } from './errors';\n\nexport default class SubscriptionsActionCreator {\n    constructor(\n        private _subscriptionsRequestSender: SubscriptionsRequestSender\n    ) {}\n\n    updateSubscriptions(\n        subscriptions: Subscriptions,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        return concat(\n            of(createAction(SubscriptionsActionType.UpdateSubscriptionsRequested)),\n            defer(async () => {\n                const { body } = await this._subscriptionsRequestSender.updateSubscriptions(subscriptions, options);\n\n                return createAction(SubscriptionsActionType.UpdateSubscriptionsSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(\n                SubscriptionsActionType.UpdateSubscriptionsFailed,\n                new UpdateSubscriptionsError(error)\n            ))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { concat, defer, empty, merge, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\nimport { SubscriptionsActionCreator, UpdateSubscriptionsAction } from '../subscription';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender,\n        private _subscriptionActionCreator: SubscriptionsActionCreator\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction | UpdateSubscriptionsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody: Partial<BillingAddressUpdateRequestBody>;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            return merge(\n                concat(\n                    of(createAction(BillingAddressActionType.ContinueAsGuestRequested)),\n                    defer(async () => {\n                        const { body } = await this._createOrUpdateBillingAddress(\n                            checkout.id,\n                            billingAddressRequestBody,\n                            options\n                        );\n\n                        return createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body);\n                    })\n                ).pipe(\n                    catchError(error => throwErrorAction(BillingAddressActionType.ContinueAsGuestFailed, error))\n                ),\n                this._updateCustomerConsent(credentials, options)\n            );\n        };\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _updateCustomerConsent(\n        {\n            email,\n            acceptsAbandonedCartEmails,\n            acceptsMarketingNewsletter,\n        }: GuestCredentials,\n        options?: RequestOptions\n    ): Observable<UpdateSubscriptionsAction> {\n        if ((acceptsAbandonedCartEmails === undefined || acceptsAbandonedCartEmails === null) &&\n            (acceptsMarketingNewsletter === undefined || acceptsMarketingNewsletter === null)) {\n            return empty();\n        }\n\n        return this._subscriptionActionCreator.updateSubscriptions({\n            email,\n            acceptsMarketingNewsletter: acceptsMarketingNewsletter || false,\n            acceptsAbandonedCartEmails: acceptsAbandonedCartEmails || false,\n        }, options);\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { Cart } from '../cart';\n\nimport getLineItemsCount from './getLineItemsCount';\n\nexport default function getShippableItemsCount(cart: Cart): number {\n    return getLineItemsCount(cart.lineItems.physicalItems.filter(item => !item.addedByPromotion));\n}\n","import { reduce } from 'lodash';\n\nimport { LineItem } from '../cart';\n\nexport default function getLineItemsCount(lineItems: LineItem[]): number {\n    return reduce(lineItems, (total, item) => total + item.quantity, 0);\n}\n"],"sourceRoot":""}